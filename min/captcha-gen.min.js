let __Captcha = null; !function () { const CAPTCHA_TYPES_NUM = "NUMBER", CAPTCHA_TYPES_PIC = "PICTURE"; function CAPTCHA_INFO(obj) { this.id = obj.id, this.value = obj.value } __Captcha = { name: "__captcha", type: CAPTCHA_TYPES_NUM, idCounter: 0, captchas: [], currentCaptchaParent: null, submitIcon: null, getRandCaptchaValue: function () { const ALPHAS = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz", randomAlphaIndex1 = this.getGenRand(ALPHAS.length - 1, 0), randomAlphaIndex2 = this.getGenRand(ALPHAS.length - 1, 0), randomAlphaIndex3 = this.getGenRand(ALPHAS.length - 1, 0), randAlphas = this.getGenRand(9, 0) + ALPHAS[randomAlphaIndex1] + this.getGenRand(9, 0) + ALPHAS[randomAlphaIndex2] + this.getGenRand(9, 0) + ALPHAS[randomAlphaIndex3]; return randAlphas }, genRandNum: function () { const randAlphas = this.getRandCaptchaValue(); this.captchas[this.idCounter] = new CAPTCHA_INFO({ id: this.idCounter, value: randAlphas }), this.idCounter++ }, getGenRand: function (max, min) { const rand = this.essentials.rand(max, min); return "number" != typeof rand ? "A" : rand }, setupCaptcha: function () { this.genRandNum() }, essentials: { rand: function (max, min) { return Math.floor(Math.random() * (max - min + 1)) + min }, insertAfter: function (newNode, referenceNode) { referenceNode.parentNode.insertBefore(newNode, referenceNode.nextSibling) } }, generate: function () { this.setupCaptcha() }, captchaCSS: "https://cdn.jsdelivr.net/gh/kushalcodes/captcha-gen-js@3192d32f17c399b81580c485925e80bcc6232243/captcha.css", initCss: function () { const link = document.createElement("link"); link.href = this.captchaCSS, link.rel = "stylesheet", document.getElementsByTagName("head")[0].appendChild(link) }, handleEnterOnInput: function (e) { const c = e.code.toLowerCase(); if ("enter" === c) { const captchaId = this.id.replace("__captcha_input_", ""); document.getElementById("__captcha_submit_" + captchaId).click() } }, initEnterKeyInput: function () { const allInputs = document.getElementsByClassName("__captcha_input"); for (let i = 0; i < allInputs.length; i++)allInputs[i].onkeyup = this.handleEnterOnInput }, initCaptchaElements: function () { this.generate(); const currentCaptcha = this.captchas[this.captchas.length - 1], el = this.currentCaptchaParent; el.innerHTML = "", el.className += " __captcha_main", el.innerHTML += "<div class='__captcha_value __border_color_default' id='__captcha_value_" + currentCaptcha.id + "'>" + currentCaptcha.value + "</div>", el.innerHTML += "<input type='button' tabindex='-1' title='Reload' class='__captcha_btn __captcha_reload __border_color_default' id='__captcha_refresh_" + currentCaptcha.id + "' value = '&#10227;' onclick='__Captcha.refresh(" + currentCaptcha.id + ") '/>", el.innerHTML += "<input type='text' class='__captcha_input __border_color_default" + (this.submitIcon ? " custom" : "") + "' tabindex='0' id='__captcha_input_" + currentCaptcha.id + "' placeholder = 'Enter captcha' maxlength = '6' />", el.innerHTML += "<input type='button' title='Check' tabindex='-1' class='__captcha_btn __border_color_default" + (this.submitIcon ? " custom" : "") + "' id='__captcha_submit_" + currentCaptcha.id + "' style='" + (this.submitIcon ? "background-image:url(" + this.submitIcon + ")" : "") + "' value = '" + (this.submitIcon ? "" : ">") + "' onclick='__Captcha.match(" + currentCaptcha.id + ") '/>" }, match: function (captchaId) { const verification = this.verify(captchaId); this.onVerify[captchaId]({ verified: verification, captcha: { userInput: document.getElementById("__captcha_input_" + captchaId).value, value: this.captchas[captchaId].value, id: this.captchas[captchaId].id, els: { parent: document.getElementById("__captcha_input_" + captchaId).parentElement, input: document.getElementById("__captcha_input_" + captchaId), value: document.getElementById("__captcha_value_" + captchaId), reload: document.getElementById("__captcha_refresh_" + captchaId), submit: document.getElementById("__captcha_submit_" + captchaId) } } }) }, verify: function (captchaId) { const captcha = this.captchas[captchaId]; return captcha.value === document.getElementById("__captcha_input_" + captchaId).value }, refresh: function (captchaId) { const newCaptchaValue = this.getRandCaptchaValue(); document.getElementById("__captcha_value_" + captchaId).innerText = newCaptchaValue, this.captchas[captchaId].value = newCaptchaValue }, onVerify: [], default: { verify: function (v) { v.verified ? alert("Success: Captcha matched") : alert("Error: Captcha mismatch") } }, handleParams: function (params) { }, init: function (elString, onVerify, params) { this.handleParams(params), this.initInner(elString, onVerify), this.initEnterKeyInput() }, warned: !1, initInner: function (elString, onVerify) { if ("string" == typeof elString) { if ("function" != typeof onVerify && (this.warned || console.warn("captcha-gen-js : No function passed for verification callback, default verification callback used", this.default.verify), onVerify = this.default.verify, this.warned = !0), "#" !== elString[0] && "." !== elString[0] && (elString = "#" + elString), this.initCss(), "#" === elString[0]) { const el = document.getElementById(elString.replace("#", "")); return el ? (this.currentCaptchaParent = el, this.initCaptchaElements(), void this.onVerify.push(onVerify)) : void console.error("captcha-gen-js : No element exist on DOM with id of ", elString) } if ("." !== elString[0]); else { const elements = document.getElementsByClassName(elString.replace(".", "")); if (0 === elements.length) return void console.error("captcha-gen-js : No elements found on DOM with class name of ", elString); for (let i = 0; i < elements.length; i++) { const captchaEl = elements[i]; this.currentCaptchaParent = captchaEl, this.initCaptchaElements(), this.onVerify.push(onVerify) } } } else console.error("captcha-gen-js : Invalid element passed for initliazing captcha.", elString) }, setSubmitIcon: function (imgUrl) { this.submitIcon = imgUrl } } }();